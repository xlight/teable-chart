version: '3.8'

services:
  postgres:
    image: postgres:15.4
    container_name: teable-postgres
    environment:
      POSTGRES_DB: teable
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d teable"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - teable-network

  redis:
    image: redis:7.2.4
    container_name: teable-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - teable-network

  minio:
    image: minio/minio:latest
    container_name: teable-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - teable-network

  # MinIO client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: teable-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set teable http://minio:9000 minioadmin minioadmin;
      mc mb teable/teable-pub --ignore-existing;
      mc mb teable/teable-pvt --ignore-existing;
      mc anonymous set public teable/teable-pub;
      echo 'MinIO buckets created and configured successfully';
      "
    networks:
      - teable-network

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: teable-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - teable-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  teable-network:
    driver: bridge
